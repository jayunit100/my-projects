Based on some of the items in the latest GitHub branch herehttps://github.com/containous/traefik/blob/master/docs/user-guide/kubernetes.md

README_Consolidated Instructions for Deploying and Testing Traefik in K8s on DC/OS

1. Deploy K8s
2. Run the RUN1 dcos-k8s-install.sh script to configure api server and K8s UI
3. Run the RUN2 dcos.k8s.traefik-install.sh script to deploy ingress, pods, ds, brace, tiller, and web services 

Steps Executed by Script(s) Below ---------------------

Configures API Server and UI Proxy for Dashboard to K8s

  dcos marathon app add marathon-lb

  dcos kubernetes kubeconfig \
    --apiserver-url https://<public-ip>:6443 \
    --insecure-skip-tls-verify

    Point browser to http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/http:kubernetes-dashboard:/proxy/

Deploys Traefik with Cluster Role Binding and rbac

kubectl create -f traefik-rbac.yaml

Deploys Traefik Configuration

  kubectl apply -f traefik-k8s.yaml
  kubectl apply -f traefik-ds.yaml

Confirms Deployment

  kubectl --namespace=kube-system get pods

Deploys traefik UI

  kubectl apply -f traefik-ui.yaml

Deploys Tiller on your K8s Cluster

  kubectl -n kube-system create serviceaccount tiller
  kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
  helm init --service-account tiller
  kubectl -n kubesystem get pods

  *** Wait for tiller to be running

Deploys Helm Chart for traefik Dashboard and Frontend Access to Services

  helm install stable/traefik --name my-release --namespace kube-system

    You can watch the status by running:

    1.  $ kubectl get svc my-release-traefik --namespace kube-system -w

      Once 'EXTERNAL-IP' is no longer '<pending>':

    2  $ kubectl describe svc my-release-traefik --namespace kube-system | grep Ingress | awk '{print $3}'

      IMPORTANT: Configure DNS records corresponding to Kubernetes ingress resources to point to the load balancer IP/hostname found in step 1

Test Example for Named-Based Routing: Cheese Web Services

  Creates PODs for Cheese App
    kubectl create -f cheese-pod.yaml

  Deploys Services on PODs
    kubectl create -f cheese-webservices.yaml

  Deplos Ingress for cheese
    kubectl create -f cheese-ingress

Now visit the Tr√¶fik dashboard and you should see a frontend for each host.
Along with a backend listing for each service with a server set up for each pod
